应对大流量高并发的原则: 横向扩展，缓存,异步

高并发系统三大目标:高新能，高可用，可扩展

性能优化原则:
    1). 以问题为导向
    2). 有数据支撑(比如提升了多少吞吐量，较少了多少响应时间等)
    3). 遵守2/8原则，即用20%的时间解决80%的性能问题
    4). 优化过程是持续的

性能度量指标:
    1). 平均值 : 把有一段时间所有请求的响应时间相加，再除以请求总数（问题在于灵敏度不高)
    2). 最大值 : 一段时间请求之内的最大值(灵敏度过高)
    3). 分位值 : ?

响应时间评估，在200ms以内，用户无延迟感知;在1s之内，有延迟，但可以接受;超出1s，时间越长，体验越差

吞吐量=并发进程/响应时间（即QPS的计算方式:QPS=并发数/响应时间),性能测试就是为了得到系统的最大并发数，从而得知系统的瓶颈

高可用系统的设计思路:
    1). 系统设计(如何处理故障):
        1)). 故障转移：对等节点故障转移(如nginx做代理), 不对等节点故障转移(如主从结构),通过心跳判断存活，通过paxos等算法选主
        2)). 超时控制(通过评估99%的响应时间，依据该时间的评估响应时间),超时之后的请求就失败
        3)). 降级:保证核心服务的稳定而牺牲非核心服务
        4)). 限流:通过对并发请求进行限速来保护系统
   2). 系统运维(如何避免故障):
        1)). 回滚,出问题的时候迅速回滚到之前的版本
        2)). 灰度发布,指系统的发布变更不是一次性的推到线上，而是按照一定比例逐步推进
        3)). 故障演练:可使用Chao Monkey工具，通过在线上系统中随机关闭节点来模拟故障(前提是你的系统能够抵御故障，否则建议搭建一套结构与线上环境相同的系统做故障演练)
        
高扩展性的设计思路:
    1). 拆分
        1)). 存储层的扩展
            1))). 按照业务纬度拆分
            2))). 按数据特点做水平拆分(分库分表)(需要考虑分布式事务)
        2)). 业务层的拆分(即服务的拆分，每个业务依赖独立的数据库资源)
