1. 秒杀设计总原则:
   1). 数据少
   2). 请求少
   3). 处理路径短
   4). 不能有单点应用
   5). 系统依赖少
   
2. 分离静态数据(即数据中不包含和访问者相关的个性化数据),可单独缓存(nginx，redis)或者上CDN

3. 发现静态热点数据(可提前预知的热点数据)，通过报名，统计预测等方式获取,提前堆这些数据进行缓存
   对于动态热点数据，通过打造热点发现系统，异步对数据进行统计和预测
  
4. 对热点数据要限制和隔离，防止其影响正常系统的使用

5. 削峰填谷：排队(消息队列，锁，文件等), 答题，分层过滤(通过不同层次过滤掉请求，使得做找到达系统的请求尽可能少)

6. 减少CPU的执行时间和设置合理的并发线程数 

7. 减少序列化(使用更高效的序列化方法,或者直接缓存序列化之后的静态数据)

8. 对于通常情况下使用预扣库存(下单预减库存，超时未付款则释放库存),对于恶意下单不付款的可以通过安全和反作弊的措施来制止
   对于大型秒杀场景，可以使用下单减库存的方式(因为不付款的情况比较少(抢到就是赚到))
   通过高可用的缓存系统，直接在缓存内部扣减库存，再异步写入到数据库中
   
9. 降级非核心服务，对核心服务进行限流(漏桶，令牌桶，时间窗等)
