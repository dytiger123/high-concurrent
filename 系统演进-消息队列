1. 消息队列:暂时存储数据的一个容器，是一个平衡低速系统和高速系统处理任务时间差的工具

2. 消息队列的作用:
   1). 削峰填谷 : 比如在秒杀场景下，高并发的写请求并不是持续的，一般只在秒杀活动开始之后的几秒或者十几秒时间才会存在，可以将秒杀请求暂存在消息队列中，
       再在后台启动多个处理程序来消费处理，当库存被消耗完之后，消息队列队列的请求就可以被丢弃
   2). 异步简化秒杀请求中的业务流程 ： 通过将次要的业务逻辑放到消息队列中，减少核心业务逻辑的耗时
   3). 解耦合 : 通过消息队列解耦核心业务和非核心业务，防止非核心系统的故障对核心服务造成影响，同时确保非核心服务在重启的时候能够继续获取到之前的数据

3. 如何应对消息的丢失(如对消息丢失有一定容忍度，以下方案可忽略):
   1). 在消息生产的过程中消失：在发送超时后旧将消息重发一次(一般重试2～3次)
   2). 在消息队列中消失 : 可设置定时刷盘(不推荐)或者以集群的方式部署多个副本，保证数据尽量不丢失(如果对消息的丢失有一定容忍性，建议只部署单机的mq，通过时候补偿的方式解决)
   3). 在消费过程中丢失:  一定要等待消费者处理完成消息之后才更新进度，否则导致消息丢失

4. 如何确保消息只被消费一次(即确保消息的幂等性):
   1). 对于kafka而言，会给生产这一个唯一的ID,并给消息一个唯一ID,当消息队列发现最后一条数据的ID与当前消息ID重复，则服务端自动丢弃
   2). 在业务层面，也是通过发号器给请求赋予唯一ID，之后处理的时候通过判断该唯一ID来确定消息是否被处理过
       在处理的时候，尽量确保消息处理和写入数据库同时成功或者失败(须引入事务)

5. 如何降低消息队列的延迟:
   1). 监控，一般有如下方式(如下方法可以结合使用):
       1)). 使用消息队列提供的工具来监控消息的堆积(kafka-consumer-groups.sh和JMX)
       2)). 通过生成监控消息来监控消息的延迟(启动一个监控程序来将消息定时循环写入到消息队列中，业务程序在消费的时候自动丢弃掉该消息，监控程序通过消费该消息来对进行监控和报警)
   2). 减少消息延迟的方式:
       1)). 优化消费代码提升性能
       2)). 增加消费者的数量(不对所有MQ适用，比如kafka就限定了一个partition一个consumer)
       3)). 将消息接收之后丢到线程池中来异步处理

*** 建议从MQ中拉取不到消息旧等待一段时间，比如按照10ms~20ms~...~100ms的步长来进行处理，从而减少CPU的负载

